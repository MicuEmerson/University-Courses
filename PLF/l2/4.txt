;transforme (L1..Ln) - (L1 2) U transforme(L2) U transforme (L3), if L2 != NIL && L3 != NIL
;                      (L1 1) U transforme(L2), if L2 != NIL
;					   (L1 0), otherwise

(defun transforme (L)
    (cond 
		((and (cdr L) (cddr L)) (append (list (car L) 2) (append (transforme (cadr L)) (transforme (caddr L) ) ) ))
		((cdr L) (append (list (car L) 1) (transforme (cadr L))) )
		(T (list (car L) 0) )
	)
)

(defun test()
	(assert (equal (transforme '(A (B) (C (D) (E)))) '(A 2 B 0 C 2 D 0 E 0)))
	(assert (equal (transforme '(A)) '(A 0)))
	(assert (equal (transforme '(A (B (C (D)) (E)))) '(A 1 B 2 C 1 D 0 E 0)))
	(assert (equal (transforme '(A (B (C) (D)) (E (F)))) '(A 2 B 2 C 0 D 0 E 1 F 0)))
	(assert (equal (transforme '(A (B) (C (D (E (F (G (H)))))))) '(A 2 B 0 C 1 D 1 E 1 F 1 G 1 H 0)))
	"all tests passed"
	
)
