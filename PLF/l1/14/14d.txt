;
; miny(l1...ln, m): m , l = 0
;                    miny(l2..ln, l1), l1 < m
;                    miny(l2..ln, m), otherwise
;

(defun minyy (L)
	(cond 
		((null L) nil)
		((miny (cdr L) (car L)))
	)
)

(defun miny (L m)
	(cond 
	    ((null L) m)
		((< (car L) m) (miny (cdr L) (car L)))
		(T (miny (cdr L) m) )
	)
)

; pozMinList(l1...ln, poz): nil, l =0
;                           poz U pozMinList(l2...ln, poz+1), l1 = minny(l1..ln)
;							pozMinList(l2...ln, poz+1), otherwise
;
(defun pozMinL(L)
	(cond 
		((null L) nil)
		((pozMinList L 1 (minyy L)))
	)
)

(defun pozMinList(L POZ M)
	(cond
		((null L) nil)
		((= (car L) M) (cons POZ (pozMinList (cdr L) (+ POZ 1) M)))
		(T (pozMinList (cdr L) (+ POZ 1) M))
	)
)

(defun testsD ()

   (assert (equal (pozMinL '(1 2 3)) '(1)))
   (assert (equal (pozMinL '()) nil))
   (assert (equal (pozMinL '(1 2 3 1 2)) '(1 4)))
   (assert (equal (pozMinL '(2 2 2 2 2)) '(1 2 3 4 5)))
   (assert (equal (pozMinL '(9 3 2 3 1 5 3 1)) '(5 8)))


   "All testsD passed"
 )
