;
;union(l1...ln, p1...pn)- p , if l = 0
                          ;l1 U union(l2...ln, p1...pn), if l1 not in p
                          ;union(l2...ln, p1...pn, otherwise				  
				
(defun unionn (L P)
	(cond 
		( (null L) p )
		( (not (member(car L) P)) (cons (car L) (union (cdr L) P )) )
		( T (union (cdr L) P ) )
	)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; product(l1...ln) :- 1, l=0;
;                     l1 * union(l2...ln), if atom(l1)
;                     pruduct(l1) U product(l2...ln), otherwise

(defun productt(L)
	(cond 
		((null L) 1)
		((atom (car L)) (* (car L) (productt (cdr L)) ))
		(T (* (productt (car L) ) (productt (cdr L))))
	)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;
; miny(l1...ln, m): m , l = 0
;                    miny(l2..ln, l1), l1 < m
;                    miny(l2..ln, m), otherwise
;

(defun minyy (L)
	(cond 
		((null L) nil)
		((miny (cdr L) (car L)))
	)
)

(defun miny (L m)
	(cond 
	    ((null L) m)
		((< (car L) m) (miny (cdr L) (car L)))
		(T (miny (cdr L) m) )
	)
)

; removeOneOcc(l1...ln, E): l2..ln, if l1 = E
;                           l1 U removeOneOcc(l2..ln, E), otherwise

(defun removeOneOcc(L E)
	(cond
		((= (car L) E) (cdr L) )
		(T (cons (car L) (removeOneOcc (cdr L) E) ) )
	)
)

; sortList (L) : null , L = 0
;                minyy(L) U sort(removeOneOcc(L, minny(L))), otherwise

(defun sortList(L)
	(cond 
		((null L) nil)
		(T (cons (minyy L) (sortList (removeOneOcc L (minyy L)) ) ) )
	)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; pozMinList(l1...ln, poz): nil, l =0
;                           poz U pozMinList(l2...ln, poz+1), l1 = minny(l1..ln)
;							pozMinList(l2...ln, poz+1), otherwise
;
(defun pozMinL(L)
	(cond 
		((null L) nil)
		((pozMinList L 1 (minyy L)))
	)
)

(defun pozMinList(L POZ M)
	(cond
		((null L) nil)
		((= (car L) M) (cons POZ (pozMinList (cdr L) (+ POZ 1) M)))
		(T (pozMinList (cdr L) (+ POZ 1) M))
	)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun testsA()
 	(assert (equal (unionn '(1 2 3) '(4 5 6)) '(1 2 3 4 5 6) ))
	(assert (equal (unionn '() '(1 2 3)) '(1 2 3) ) )
	(assert (equal (unionn '(1 2 3) '(1 2 3 4 5)) '(1 2 3 4 5) ) )
	(assert (equal (unionn '(1 2 3) '(1 4 5 2)) '(3 1 4 5 2) ) )
	(assert (equal (unionn '(1 2 3) '()) '(1 2 3) ) )
	"All testsA passed"
)

(defun testsB()
 	(assert (= (productt '(1 1 1 1)) 1))
    (assert (= (productt '(1 (1(1(1))))) 1))
	(assert (= (productt '(1 (3(1)) 2)) 6))
	(assert (= (productt '(1 2 3 1 2)) 12))
	(assert (= (productt '(2 (2 (2 (2 2))))) 32))
	"All testsB passed"
)



(defun testsC()
	(assert (equal (sortList '(1 2 3 1 2)) '(1 1 2 2 3)))
	(assert (equal (sortList '()) nil))
	(assert (equal (sortList '(1 1 1)) '(1 1 1)))
	(assert (equal (sortList '(4 3 2 1)) '(1 2 3 4)))
	(assert (equal (sortList '(2 2 2 1 1 1 5)) '(1 1 1 2 2 2 5)))
	"All testsC passed"
)

(defun testsD ()

   (assert (equal (pozMinL '(1 2 3)) '(1)))
   (assert (equal (pozMinL '()) nil))
   (assert (equal (pozMinL '(1 2 3 1 2)) '(1 4)))
   (assert (equal (pozMinL '(2 2 2 2 2)) '(1 2 3 4 5)))
   (assert (equal (pozMinL '(9 3 2 3 1 5 3 1)) '(5 8)))


   "All testsD passed"
 )


(defun testAll()
    (testsA)
	(testsB)
	(testsC)
	(testsD)
	"All tests passed"
)
	
	
	
	
	
	
	
	
	
	

