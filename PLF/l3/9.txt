
;removeL(X E) - nil , atom(X) & X = E
;             -	[X] , atom(X)
;			  - [U removeL(Xi E)], otherwise     ... where U is append from 1 to X.size

(defun removeL (X E)
	(cond 
		((and (atom X) (= X E)) nil)
		((atom X) (list X))
		(T (list (mapcan #'(lambda (X) (removeL X E)) X)))
	)
)

(defun removeMain(X E)
	(car (removeL X E))
)

(defun test()
	
	(assert (equal (removeMain '(1 2 (2 4) ((2 3)) 3) 2)  '(1 (4) ((3)) 3) ) )
	(assert (equal (removeMain '(2 2 2) 2)  nil ) )
	(assert (equal (removeMain '(2 3 (1 2 3) 2) 2)  '(3 (1 3)) ) )
	(assert (equal (removeMain '((((((2)))))) 2)  '(((((nil))))) ) )
	(assert (equal (removeMain '(1 (2) 3 ((2))) 2)  '(1 nil 3 (nil)) ) )
	"passed all tests"
	
)
